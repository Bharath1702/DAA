package DAA;

import java.util.Random;
import java.util.Scanner;

public class QuickSort {
	static final int  MAX=10005;
	static int[]a=new int[MAX];
	
	static void swap(int[] arr, int i, int j) {
		int temp= arr[i];
		arr[i]=arr[j];
		arr[j]=temp;
	}
	static int partition(int[] arr, int low, int high) {
		int pivot=arr[high];
		int i =low-1;
		for(int j=low;j<=high-1;j++) {
			if(arr[j]<pivot) {
				i++;
				swap(arr,i,j);
			}
		}
		swap(arr,i+1,high);
		return i+1;
	}
	static void QuickSort(int[] arr,int low, int high) {
		if(low<high) {
			int pivot=partition(arr,low,high);
			QuickSort(arr,low,pivot-1);
			QuickSort(arr,pivot+1,high);
		}
	}
	static void printArray(int[] arr) {
		for(int num:arr) {
			System.out.println(num+"");
		}
		System.out.println();
	}
	public static int[] generateRandom(int r) {
		int[] nums=new int[r];
		Random rand= new Random();
		for(int i=0;i<r;i++) {
			nums[i]=rand.nextInt(10000);
		}
		return nums;
	}
	public static void main(String[] args) {
		int r =100;
		int[] arr= generateRandom(r);
		Scanner input=new Scanner(System.in);
		System.out.println("Enter Mac array size: ");
		int n =input.nextInt();
		Random rand = new Random();
		System.out.println("Enter the array elements");
		for(int i=0;i<n;i++) {
			a[i]=rand.nextInt();
			long StartTime=System.nanoTime();
			QuickSort(arr,0,n-1);
			long stopTime=System.nanoTime();
			long elapsedTime=stopTime-StartTime;
			System.out.println("Time complexity(ms) for n = " +n+ " is "+(double)elapsedTime/1000000);
			System.out.println("Sorter array (Quick sort): ");
			for (int i1=0;i1<n;i1++) {
				System.out.println(a[i1]);
				
			}
		}
	}

}
